4b10
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15.1" />
		<meta name="keywords" content="Fractalbot,Ruby" />
		<link rel="alternate" type="application/x-wiki" title="Edit" href="/w/index.php?title=Fractalbot&amp;action=edit" />
		<link rel="edit" title="Edit" href="/w/index.php?title=Fractalbot&amp;action=edit" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Telecomix Crypto Munitions Bureau (en)" />
		<link title="Creative Commons" type="application/rdf+xml" href="/w/index.php?title=Fractalbot&amp;action=creativecommons" rel="meta" />
		<link rel="copyright" href="http://creativecommons.org/licenses/publicdomain/" />
		<link rel="alternate" type="application/rss+xml" title="Telecomix Crypto Munitions Bureau RSS Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Telecomix Crypto Munitions Bureau Atom Feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Fractalbot - Telecomix Crypto Munitions Bureau</title>
		<link rel="stylesheet" href="/w/skins/common/shared.css?207" type="text/css" media="screen" />
		<link rel="stylesheet" href="/w/skins/common/commonPrint.css?207" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/skins/monobook/main.css?207" type="text/css" media="screen" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/w/skins/monobook/IE50Fixes.css?207" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/w/skins/monobook/IE55Fixes.css?207" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/w/skins/monobook/IE60Fixes.css?207" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/w/skins/monobook/IE70Fixes.css?207" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=18000&amp;action=raw&amp;maxage=18000" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=18000&amp;action=raw&amp;maxage=18000" type="text/css" media="print" />
		<link rel="stylesheet" href="/w/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=18000&amp;action=raw&amp;maxage=18000" type="text/css" />
		<link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=18000&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/w/skins/common/IEFixes.js?207"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/w/skins";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "https://cryptoanarchy.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Fractalbot";
		var wgTitle = "Fractalbot";
		var wgAction = "view";
		var wgArticleId = "391";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 3639;
		var wgVersion = "1.15.1";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/w/skins/common/wikibits.js?207"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/w/skins/common/ajax.js?207"></script>
		<script type="text/javascript" src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Fractalbot skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
				<h1 id="firstHeading" class="firstHeading">Fractalbot</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Telecomix Crypto Munitions Bureau</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<p>Fractalbot is written in <a href="/wiki/Ruby" title="Ruby">ruby</a>, as an experiment in ruby.
</p><p><b>What does it do?</b> It is hardcoded to connect to telecomix IRC and join the channel #test2, where users can ask it to draw ASCII fractals. Typing "!fractal help" will show the command syntax.
</p>
<a name="Conclusions" id="Conclusions"></a><h2><span class="editsection">[<a href="/w/index.php?title=Fractalbot&amp;action=edit&amp;section=1" title="Edit section: Conclusions">edit</a>]</span> <span class="mw-headline"> Conclusions </span></h2>
<ul><li> ruby is nice
</li><li> rubys lack of types was INSANELY exhausting, had to debug all the time&nbsp;:O&nbsp;:O&nbsp;:O
</li></ul>
<a name="Code" id="Code"></a><h2><span class="editsection">[<a href="/w/index.php?title=Fractalbot&amp;action=edit&amp;section=2" title="Edit section: Code">edit</a>]</span> <span class="mw-headline"> Code </span></h2>
<pre>
#!/usr/bin/env ruby1.9.1
require 'socket'

class Fraktal
	def initialize(width=120, height=60, top_left=Complex(-1.5, 1.0), bottom_right=Complex(1.0,-1.0), c=nil)
		span_real = bottom_right.real - top_left.real
		span_im = (top_left.imag - bottom_right.imag ).abs

		@width = width
		@height = height
		@top_left = top_left
		@bottom_right = bottom_right
		@c = c 					# Complex(0,-1)
		@matrix = []
		@x_step = Complex(span_real.to_f / width, 0)
		@y_step = Complex(0, span_im.to_f / height)

		@max_it = 1000

		puts(&quot;pixels height: #{height}&quot;)
		puts(&quot;pixels width:  #{width}&quot;)
		puts(&quot;x-stepping: #{@x_step}&quot;)
		puts(&quot;y-stepping: #{@y_step}&quot;)
		puts(&quot;top left corner: #{@top_left}&quot;)
		puts(&quot;bottom right corner: #{@bottom_right}&quot;)
		puts(&quot;real span: #{span_real}&quot;)
		puts(&quot;imaginary span: #{span_im}&quot;)

		compute
	end

	## print the fractal
	def get_ascii
		picture = []
		for y in (0..@height)
			picture[y] = &quot;&quot;
			for x in (0..@width)
				picture[y] += color( @matrix[y][x] )
			end
		end
		return picture
	end

private

	def compute
		z = @top_left
		for y in (0..@height)
			@matrix[y] = Array.new(@width)
			for x in (0..@width)
				@matrix[y][x] = iterate(z,@c)
				z += @x_step
			end
			z = @top_left - y * @y_step
		end
	end


	def iterate(z, c)
		c&nbsp;? c&nbsp;: c = Complex(z)
		(0..@max_it).each { |n|
			z = z*z + c
			if z.abs &gt; 4
				return n
			end
		}
		return @max_it
	end

	## calculate the color of the pseudopixel
	def color(n)
		n &gt; 9&nbsp;? &quot;  &quot;&nbsp;: &quot; &quot; + (0+n).to_s
	end

end

##################################################################################################

class Kaosbot
	attr_accessor&nbsp;:session

	def initialize(server=&quot;irc.telecomix.org&quot;, port=6667, nickname=&quot;kaosbot&quot;, verbosity=0)
		@nickname = nickname
		@server_name = server
		@server_port = port
		@verbosity = verbosity
		@threads = Array.new
		( verbosity &gt; 0 )&nbsp;? puts(&quot;verbosity: #{verbosity}&quot;)&nbsp;: 
		@verbosity = verbosity
	end

	def lprint(string, level=3)
		if level &lt;= @verbosity
			puts(string)
		end
	end

	def connect()
		new_thread = Thread.new() { 
			lprint(&quot;connecting to #{@server_name}&quot;, 0)
			until @session
				@server_ip = IPSocket.getaddress(@server_name)
				lprint(&quot;Connecting to #{@server_ip}:#{@server_port}&quot;, 1)
				begin
					@session = TCPSocket.open(@server_ip, @server_port)
				rescue =&gt; error
					lprint(&quot;failed to connect, trying again..&quot;, 0)
					lprint(&quot;TCP Socket error --&gt; &quot; + error.to_s, 1)
				end
			end
			lprint(&quot;connected to #{@server_name} --&gt; #{@server_ip}:#{@server_port}&quot;, 0)
			@session.write(&quot;NICK #{@nickname}\r\n&quot;)
			@session.write(&quot;USER #{@nickname} 8 d&nbsp;:#{@nickname}\r\n&quot;)
			@connected = true
			main_loop
		}
		@threads.push(new_thread)
	end

	def disconnect()
		if @connected
			@connected = false
			@session.close()
			lprint(&quot;disconnected.&quot;, 0)
		else
			puts(&quot;disconnect called without being connected!&quot;)
		end
	end

	def reconnect()
		if @connected 
			lprint(&quot;reconnecting&quot;, 0)
			disconnect()
			connect()
		else 
			puts(&quot;reconnect called without being connected!&quot;)
		end
	end

	def server_name?
		@server_name
	end

	def server_port?
		@server_port
	end

	def join(channel=&quot;#test2&quot;)
		@connected&nbsp;? lprint(&quot;waiting for bot to connect to server..&quot;, 1)&nbsp;:
		until @connected
			Thread.pass
		end
		@session.write(&quot;JOIN #{channel}\n&quot;)
		lprint(&quot;tried to join #{channel}&quot;, 0)
	end

	def main_loop
		while true
			string = @session.gets
			line = string.chomp
			lprint(line, 3)

			puts &quot;test0&quot;

			primitive = /^(?&lt;command&gt;[A-Z]+){1}/.match(line)
			system = /^:(?&lt;sender&gt;[[:graph:]]+)[\s]+(?&lt;cmd&gt;[a-zA-Z0-9]{1,})\s+(?&lt;target&gt;[[:graph:]]+)(\s:)*(?&lt;rest&gt;(.*))$/.match(line)

			puts &quot;test1&quot;

			if primitive
				case primitive[:command]
					when &quot;PING&quot;
						lprint(&quot;received PING, sending PONG&quot;, 3)
						@session.write(&quot;PONG\n&quot;)
					when &quot;ERROR&quot;
						lprint(&quot;WARNING: Received this error-message from the server: #{line}&quot;, 0)
					else
						lprint(&quot;NOTICE: Received unknown message&nbsp;: #{line}&quot;, 2)
				end
			elsif system
				puts &quot;test2&quot;
				words = system[:rest].split(/[\s]+/)
				if words == nil
					next
				end
				puts &quot;test3&quot;
				user_msg = system[:rest].split
				if &quot;PRIVMSG&quot;.match( system[:cmd] ) &amp;&amp; user_msg
					if &quot;!fractal&quot;.match( user_msg[0] )
						puts &quot;test4&quot;
						parsefractal(system[:sender], system[:target], words, words.length)
					end
				end
			end
		end
	end

	def parsefractal(from, target, umsg, len)
		puts &quot;from: #{from}, target: #{target}, umsg: #{umsg}, len: #{len}&quot;
		if len &lt; 2
			Thread.new { print_fractal(target) }
		elsif /^\s*help\s*$/.match(umsg[1])
			@session.write(&quot;PRIVMSG #{target}&nbsp;:!fractal [h=int] [w=int] [c=a+bi]\n&quot;)
		else
			c, c_re, c_im = nil, nil, nil
			height, width = 50, 79
			matched = false
			umsg.each do |msg|
				puts &quot;trying to match &quot; + msg
				complex_regexp.match(msg) { |complex|
					c = Complex(complex[:re], complex[:im])
					puts &quot;this c is what we got:&quot; + c.to_s
					matched = true
				}
				/^w=(?&lt;w&gt;[1-9]{1}[0-9]*){1}$/.match(msg) { |m|
					width = m[:w].to_i
					matched = true
				}
				/^h=(?&lt;h&gt;[1-9]{1}[0-9]*){1}$/.match(msg) { |m|
					height = m[:h].to_i
					matched = true
				}
			end
			if matched 
				puts &quot;printing fractal&quot;
				Thread.new { print_fractal(target, width, height, c) }
			end
		end
	end

	def complex_regexp
		pat_begin = &quot;^&quot;
		pat_end = &quot;$&quot;
		prefix = &quot;c=&quot;
		re = &quot;(?&lt;re&gt;[0-9]*(([.,]{1})[0-9]{1,12}){0,1}){1}&quot;
		im = &quot;(?&lt;im&gt;[+-]{1}[0-9]*(([.,]{1})[0-9]{1,12}){0,1}i{1}){1}&quot;
		return Regexp.new( pat_begin + prefix + re + im + pat_end )
	end

	def print_fractal(target, width=79, height=50, type=nil)
		puts &quot;creating fractal..&quot;
		fraktal = Fraktal.new(width, height, Complex(-1.8, 1.3), Complex(0.8,-1.3), type)
		puts &quot;tries to get picture..&quot;
		picture = fraktal.get_ascii
		puts &quot;got ascii..&quot;
		picture.each { |row|
			puts( &quot;PRIVMSG #{target}&nbsp;:#{row}\n&quot;)
			@session.write(&quot;PRIVMSG #{target}&nbsp;:#{row}\n&quot;)
		}
	end
end


irc = Kaosbot.new(&quot;irc.telecomix.org&quot;, 6667, &quot;kaosbot&quot;, 3)
irc.connect
irc.join
while true
	Thread.pass
end
</pre>
<a name="How_to_run_it" id="How_to_run_it"></a><h2><span class="editsection">[<a href="/w/index.php?title=Fractalbot&amp;action=edit&amp;section=3" title="Edit section: How to run it">edit</a>]</span> <span class="mw-headline"> How to run it </span></h2>
<p>put the above code in a file, chmod+x it and type "./filename"
</p>
<!-- 
NewPP limit report
Preprocessor node count: 7/1000000
Post-expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key cryptoanarchy_wiki:pcache:idhash:391-0!1!0!!en!2 and timestamp 20121020023617 -->
<div class="printfooter">
Retrieved from "<a href="https://cryptoanarchy.org/wiki/Fractalbot">https://cryptoanarchy.org/wiki/Fractalbot</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Category</a>:&#32;<span dir='ltr'><a href="/wiki/Category:Programming" title="Category:Programming">Programming</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/Fractalbot" title="View the content page [c]" accesskey="c">Page</a></li>
				 <li id="ca-talk" class="new"><a href="/w/index.php?title=Talk:Fractalbot&amp;action=edit&amp;redlink=1" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/w/index.php?title=Fractalbot&amp;action=edit" title="You can edit this page.&#10;Please use the preview button before saving [e]" accesskey="e">Edit</a></li>
				 <li id="ca-history"><a href="/w/index.php?title=Fractalbot&amp;action=history" title="Past revisions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Fractalbot" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(/w/tcmb.png);" href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/Main_Page">Main Page</a></li>
				<li id="n-portal"><a href="/wiki/Telecomix_Crypto_Munitions_Bureau:Community_Portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-currentevents"><a href="/wiki/Telecomix_Crypto_Munitions_Bureau:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
				<li id="n-help"><a href="/wiki/Help:Contents" title="The place to find out">Help</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search Telecomix Crypto Munitions Bureau [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search the pages for this text" />
			</div></form>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Fractalbot" title="List of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Fractalbot" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/w/index.php?title=Fractalbot&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/w/index.php?title=Fractalbot&amp;oldid=3639" title="Permanent link to this revision of the page">Permanent link</a></li>			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/w/skins/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
				<div id="f-copyrightico"><a href="http://creativecommons.org/licenses/publicdomain/"><img src="/w/skins/common/images/public-domain.png" alt='Public Domain' /></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 15 March 2012, at 10:40.</li>
					<li id="viewcount">This page has been accessed 131 times.</li>
					<li id="copyright">Content is available under <a href="http://creativecommons.org/licenses/publicdomain/" class="external " title="http://creativecommons.org/licenses/publicdomain/">Public Domain</a>.</li>
					<li id="privacy"><a href="/wiki/Telecomix_Crypto_Munitions_Bureau:Privacy_policy" title="Telecomix Crypto Munitions Bureau:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/Telecomix_Crypto_Munitions_Bureau:About" title="Telecomix Crypto Munitions Bureau:About">About Telecomix Crypto Munitions Bureau</a></li>
					<li id="disclaimer"><a href="/wiki/Telecomix_Crypto_Munitions_Bureau:General_disclaimer" title="Telecomix Crypto Munitions Bureau:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served in 0.163 secs. --></body></html
2
>

0

